/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2013-10-30 15:57:41 UTC)
 * on 2013-11-05 at 17:46:49 UTC 
 * Modify at your own risk.
 */

package com.appspot.twitterlitesample.message;

/**
 * Service definition for Message (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link MessageRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Message extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.17.0-rc of the message library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://twitterlitesample.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "message/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Message(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Message(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the MessageController collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Message message = new Message(...);}
   *   {@code Message.MessageController.List request = message.messageController().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public MessageController messageController() {
    return new MessageController();
  }

  /**
   * The "messageController" collection of methods.
   */
  public class MessageController {

    /**
     * Create a request for the method "messageController.updateMessageDTOMetadata".
     *
     * This request holds the parameters needed by the message server.  After setting any optional
     * parameters, call the {@link UpdateMessageDTOMetadata#execute()} method to invoke the remote
     * operation.
     *
     * @param content the {@link com.appspot.twitterlitesample.message.model.MessageGetDTO}
     * @return the request
     */
    public UpdateMessageDTOMetadata updateMessageDTOMetadata(com.appspot.twitterlitesample.message.model.MessageGetDTO content) throws java.io.IOException {
      UpdateMessageDTOMetadata result = new UpdateMessageDTOMetadata(content);
      initialize(result);
      return result;
    }

    public class UpdateMessageDTOMetadata extends MessageRequest<com.appspot.twitterlitesample.message.model.MessageGetDTO> {

      private static final String REST_PATH = "messagegetdto";

      /**
       * Create a request for the method "messageController.updateMessageDTOMetadata".
       *
       * This request holds the parameters needed by the the message server.  After setting any optional
       * parameters, call the {@link UpdateMessageDTOMetadata#execute()} method to invoke the remote
       * operation. <p> {@link UpdateMessageDTOMetadata#initialize(com.google.api.client.googleapis.serv
       * ices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.twitterlitesample.message.model.MessageGetDTO}
       * @since 1.13
       */
      protected UpdateMessageDTOMetadata(com.appspot.twitterlitesample.message.model.MessageGetDTO content) {
        super(Message.this, "PUT", REST_PATH, content, com.appspot.twitterlitesample.message.model.MessageGetDTO.class);
      }

      @Override
      public UpdateMessageDTOMetadata setAlt(java.lang.String alt) {
        return (UpdateMessageDTOMetadata) super.setAlt(alt);
      }

      @Override
      public UpdateMessageDTOMetadata setFields(java.lang.String fields) {
        return (UpdateMessageDTOMetadata) super.setFields(fields);
      }

      @Override
      public UpdateMessageDTOMetadata setKey(java.lang.String key) {
        return (UpdateMessageDTOMetadata) super.setKey(key);
      }

      @Override
      public UpdateMessageDTOMetadata setOauthToken(java.lang.String oauthToken) {
        return (UpdateMessageDTOMetadata) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateMessageDTOMetadata setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateMessageDTOMetadata) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateMessageDTOMetadata setQuotaUser(java.lang.String quotaUser) {
        return (UpdateMessageDTOMetadata) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateMessageDTOMetadata setUserIp(java.lang.String userIp) {
        return (UpdateMessageDTOMetadata) super.setUserIp(userIp);
      }

      @Override
      public UpdateMessageDTOMetadata set(String parameterName, Object value) {
        return (UpdateMessageDTOMetadata) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the User collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Message message = new Message(...);}
   *   {@code Message.User.List request = message.user().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public User user() {
    return new User();
  }

  /**
   * The "user" collection of methods.
   */
  public class User {

    /**
     * An accessor for creating requests from the Messages collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Message message = new Message(...);}
     *   {@code Message.Messages.List request = message.messages().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Messages messages() {
      return new Messages();
    }

    /**
     * The "messages" collection of methods.
     */
    public class Messages {

      /**
       * Create a request for the method "messages.list".
       *
       * This request holds the parameters needed by the message server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param limit
       * @param userKey
       * @return the request
       */
      public List list(java.lang.Integer limit, java.lang.String userKey) throws java.io.IOException {
        List result = new List(limit, userKey);
        initialize(result);
        return result;
      }

      public class List extends MessageRequest<com.appspot.twitterlitesample.message.model.MessagesCollection> {

        private static final String REST_PATH = "message/user";

        /**
         * Create a request for the method "messages.list".
         *
         * This request holds the parameters needed by the the message server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param limit
         * @param userKey
         * @since 1.13
         */
        protected List(java.lang.Integer limit, java.lang.String userKey) {
          super(Message.this, "GET", REST_PATH, null, com.appspot.twitterlitesample.message.model.MessagesCollection.class);
          this.limit = com.google.api.client.util.Preconditions.checkNotNull(limit, "Required parameter limit must be specified.");
          this.userKey = com.google.api.client.util.Preconditions.checkNotNull(userKey, "Required parameter userKey must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Integer limit;

        /**

         */
        public java.lang.Integer getLimit() {
          return limit;
        }

        public List setLimit(java.lang.Integer limit) {
          this.limit = limit;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.String userKey;

        /**

         */
        public java.lang.String getUserKey() {
          return userKey;
        }

        public List setUserKey(java.lang.String userKey) {
          this.userKey = userKey;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.String cursor;

        /**

         */
        public java.lang.String getCursor() {
          return cursor;
        }

        public List setCursor(java.lang.String cursor) {
          this.cursor = cursor;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Timeline collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Message message = new Message(...);}
     *   {@code Message.Timeline.List request = message.timeline().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Timeline timeline() {
      return new Timeline();
    }

    /**
     * The "timeline" collection of methods.
     */
    public class Timeline {

      /**
       * Create a request for the method "timeline.list".
       *
       * This request holds the parameters needed by the message server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param limit
       * @param userKey
       * @return the request
       */
      public List list(java.lang.Integer limit, java.lang.String userKey) throws java.io.IOException {
        List result = new List(limit, userKey);
        initialize(result);
        return result;
      }

      public class List extends MessageRequest<com.appspot.twitterlitesample.message.model.MessagesCollection> {

        private static final String REST_PATH = "message/user/timeline";

        /**
         * Create a request for the method "timeline.list".
         *
         * This request holds the parameters needed by the the message server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param limit
         * @param userKey
         * @since 1.13
         */
        protected List(java.lang.Integer limit, java.lang.String userKey) {
          super(Message.this, "GET", REST_PATH, null, com.appspot.twitterlitesample.message.model.MessagesCollection.class);
          this.limit = com.google.api.client.util.Preconditions.checkNotNull(limit, "Required parameter limit must be specified.");
          this.userKey = com.google.api.client.util.Preconditions.checkNotNull(userKey, "Required parameter userKey must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Integer limit;

        /**

         */
        public java.lang.Integer getLimit() {
          return limit;
        }

        public List setLimit(java.lang.Integer limit) {
          this.limit = limit;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.String userKey;

        /**

         */
        public java.lang.String getUserKey() {
          return userKey;
        }

        public List setUserKey(java.lang.String userKey) {
          this.userKey = userKey;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.String cursor;

        /**

         */
        public java.lang.String getCursor() {
          return cursor;
        }

        public List setCursor(java.lang.String cursor) {
          this.cursor = cursor;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Create a request for the method "delete".
   *
   * This request holds the parameters needed by the message server.  After setting any optional
   * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
   *
   * @param msgKey
   * @return the request
   */
  public Delete delete(java.lang.String msgKey) throws java.io.IOException {
    Delete result = new Delete(msgKey);
    initialize(result);
    return result;
  }

  public class Delete extends MessageRequest<Void> {

    private static final String REST_PATH = "message/{msgKey}";

    /**
     * Create a request for the method "delete".
     *
     * This request holds the parameters needed by the the message server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
     * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param msgKey
     * @since 1.13
     */
    protected Delete(java.lang.String msgKey) {
      super(Message.this, "DELETE", REST_PATH, null, Void.class);
      this.msgKey = com.google.api.client.util.Preconditions.checkNotNull(msgKey, "Required parameter msgKey must be specified.");
    }

    @Override
    public Delete setAlt(java.lang.String alt) {
      return (Delete) super.setAlt(alt);
    }

    @Override
    public Delete setFields(java.lang.String fields) {
      return (Delete) super.setFields(fields);
    }

    @Override
    public Delete setKey(java.lang.String key) {
      return (Delete) super.setKey(key);
    }

    @Override
    public Delete setOauthToken(java.lang.String oauthToken) {
      return (Delete) super.setOauthToken(oauthToken);
    }

    @Override
    public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Delete) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Delete setQuotaUser(java.lang.String quotaUser) {
      return (Delete) super.setQuotaUser(quotaUser);
    }

    @Override
    public Delete setUserIp(java.lang.String userIp) {
      return (Delete) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String msgKey;

    /**

     */
    public java.lang.String getMsgKey() {
      return msgKey;
    }

    public Delete setMsgKey(java.lang.String msgKey) {
      this.msgKey = msgKey;
      return this;
    }

    @Override
    public Delete set(String parameterName, Object value) {
      return (Delete) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "list".
   *
   * This request holds the parameters needed by the message server.  After setting any optional
   * parameters, call the {@link List#execute()} method to invoke the remote operation.
   *
   * @param limit
   * @return the request
   */
  public List list(java.lang.Integer limit) throws java.io.IOException {
    List result = new List(limit);
    initialize(result);
    return result;
  }

  public class List extends MessageRequest<com.appspot.twitterlitesample.message.model.MessagesCollection> {

    private static final String REST_PATH = "message";

    /**
     * Create a request for the method "list".
     *
     * This request holds the parameters needed by the the message server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
     * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
     * called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param limit
     * @since 1.13
     */
    protected List(java.lang.Integer limit) {
      super(Message.this, "GET", REST_PATH, null, com.appspot.twitterlitesample.message.model.MessagesCollection.class);
      this.limit = com.google.api.client.util.Preconditions.checkNotNull(limit, "Required parameter limit must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public List setAlt(java.lang.String alt) {
      return (List) super.setAlt(alt);
    }

    @Override
    public List setFields(java.lang.String fields) {
      return (List) super.setFields(fields);
    }

    @Override
    public List setKey(java.lang.String key) {
      return (List) super.setKey(key);
    }

    @Override
    public List setOauthToken(java.lang.String oauthToken) {
      return (List) super.setOauthToken(oauthToken);
    }

    @Override
    public List setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (List) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public List setQuotaUser(java.lang.String quotaUser) {
      return (List) super.setQuotaUser(quotaUser);
    }

    @Override
    public List setUserIp(java.lang.String userIp) {
      return (List) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public List setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public List setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @Override
    public List set(String parameterName, Object value) {
      return (List) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "patch".
   *
   * This request holds the parameters needed by the message server.  After setting any optional
   * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
   *
   * @param msgKey
   * @param content the {@link com.appspot.twitterlitesample.message.model.MessageSetDTO}
   * @return the request
   */
  public Patch patch(java.lang.String msgKey, com.appspot.twitterlitesample.message.model.MessageSetDTO content) throws java.io.IOException {
    Patch result = new Patch(msgKey, content);
    initialize(result);
    return result;
  }

  public class Patch extends MessageRequest<Void> {

    private static final String REST_PATH = "message/{msgKey}";

    /**
     * Create a request for the method "patch".
     *
     * This request holds the parameters needed by the the message server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
     * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param msgKey
     * @param content the {@link com.appspot.twitterlitesample.message.model.MessageSetDTO}
     * @since 1.13
     */
    protected Patch(java.lang.String msgKey, com.appspot.twitterlitesample.message.model.MessageSetDTO content) {
      super(Message.this, "PUT", REST_PATH, content, Void.class);
      this.msgKey = com.google.api.client.util.Preconditions.checkNotNull(msgKey, "Required parameter msgKey must be specified.");
    }

    @Override
    public Patch setAlt(java.lang.String alt) {
      return (Patch) super.setAlt(alt);
    }

    @Override
    public Patch setFields(java.lang.String fields) {
      return (Patch) super.setFields(fields);
    }

    @Override
    public Patch setKey(java.lang.String key) {
      return (Patch) super.setKey(key);
    }

    @Override
    public Patch setOauthToken(java.lang.String oauthToken) {
      return (Patch) super.setOauthToken(oauthToken);
    }

    @Override
    public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Patch) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Patch setQuotaUser(java.lang.String quotaUser) {
      return (Patch) super.setQuotaUser(quotaUser);
    }

    @Override
    public Patch setUserIp(java.lang.String userIp) {
      return (Patch) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String msgKey;

    /**

     */
    public java.lang.String getMsgKey() {
      return msgKey;
    }

    public Patch setMsgKey(java.lang.String msgKey) {
      this.msgKey = msgKey;
      return this;
    }

    @Override
    public Patch set(String parameterName, Object value) {
      return (Patch) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "post".
   *
   * This request holds the parameters needed by the message server.  After setting any optional
   * parameters, call the {@link Post#execute()} method to invoke the remote operation.
   *
   * @param senderKey
   * @param content the {@link com.appspot.twitterlitesample.message.model.MessageSetDTO}
   * @return the request
   */
  public Post post(java.lang.String senderKey, com.appspot.twitterlitesample.message.model.MessageSetDTO content) throws java.io.IOException {
    Post result = new Post(senderKey, content);
    initialize(result);
    return result;
  }

  public class Post extends MessageRequest<com.appspot.twitterlitesample.message.model.MessageGetDTO> {

    private static final String REST_PATH = "message";

    /**
     * Create a request for the method "post".
     *
     * This request holds the parameters needed by the the message server.  After setting any optional
     * parameters, call the {@link Post#execute()} method to invoke the remote operation. <p> {@link
     * Post#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
     * called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param senderKey
     * @param content the {@link com.appspot.twitterlitesample.message.model.MessageSetDTO}
     * @since 1.13
     */
    protected Post(java.lang.String senderKey, com.appspot.twitterlitesample.message.model.MessageSetDTO content) {
      super(Message.this, "POST", REST_PATH, content, com.appspot.twitterlitesample.message.model.MessageGetDTO.class);
      this.senderKey = com.google.api.client.util.Preconditions.checkNotNull(senderKey, "Required parameter senderKey must be specified.");
    }

    @Override
    public Post setAlt(java.lang.String alt) {
      return (Post) super.setAlt(alt);
    }

    @Override
    public Post setFields(java.lang.String fields) {
      return (Post) super.setFields(fields);
    }

    @Override
    public Post setKey(java.lang.String key) {
      return (Post) super.setKey(key);
    }

    @Override
    public Post setOauthToken(java.lang.String oauthToken) {
      return (Post) super.setOauthToken(oauthToken);
    }

    @Override
    public Post setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Post) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Post setQuotaUser(java.lang.String quotaUser) {
      return (Post) super.setQuotaUser(quotaUser);
    }

    @Override
    public Post setUserIp(java.lang.String userIp) {
      return (Post) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String senderKey;

    /**

     */
    public java.lang.String getSenderKey() {
      return senderKey;
    }

    public Post setSenderKey(java.lang.String senderKey) {
      this.senderKey = senderKey;
      return this;
    }

    @Override
    public Post set(String parameterName, Object value) {
      return (Post) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "read".
   *
   * This request holds the parameters needed by the message server.  After setting any optional
   * parameters, call the {@link Read#execute()} method to invoke the remote operation.
   *
   * @param msgKey
   * @return the request
   */
  public Read read(java.lang.String msgKey) throws java.io.IOException {
    Read result = new Read(msgKey);
    initialize(result);
    return result;
  }

  public class Read extends MessageRequest<com.appspot.twitterlitesample.message.model.MessageGetDTO> {

    private static final String REST_PATH = "message/{msgKey}";

    /**
     * Create a request for the method "read".
     *
     * This request holds the parameters needed by the the message server.  After setting any optional
     * parameters, call the {@link Read#execute()} method to invoke the remote operation. <p> {@link
     * Read#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
     * called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param msgKey
     * @since 1.13
     */
    protected Read(java.lang.String msgKey) {
      super(Message.this, "GET", REST_PATH, null, com.appspot.twitterlitesample.message.model.MessageGetDTO.class);
      this.msgKey = com.google.api.client.util.Preconditions.checkNotNull(msgKey, "Required parameter msgKey must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public Read setAlt(java.lang.String alt) {
      return (Read) super.setAlt(alt);
    }

    @Override
    public Read setFields(java.lang.String fields) {
      return (Read) super.setFields(fields);
    }

    @Override
    public Read setKey(java.lang.String key) {
      return (Read) super.setKey(key);
    }

    @Override
    public Read setOauthToken(java.lang.String oauthToken) {
      return (Read) super.setOauthToken(oauthToken);
    }

    @Override
    public Read setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Read) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Read setQuotaUser(java.lang.String quotaUser) {
      return (Read) super.setQuotaUser(quotaUser);
    }

    @Override
    public Read setUserIp(java.lang.String userIp) {
      return (Read) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String msgKey;

    /**

     */
    public java.lang.String getMsgKey() {
      return msgKey;
    }

    public Read setMsgKey(java.lang.String msgKey) {
      this.msgKey = msgKey;
      return this;
    }

    @Override
    public Read set(String parameterName, Object value) {
      return (Read) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Message}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Message}. */
    @Override
    public Message build() {
      return new Message(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link MessageRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setMessageRequestInitializer(
        MessageRequestInitializer messageRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(messageRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
